diff -Nur -x '*.orig' -x '*~' system-config-printer-1.4.1/dbus/org.fedoraproject.Config.Printing.xml system-config-printer-1.4.1.new/dbus/org.fedoraproject.Config.Printing.xml
--- system-config-printer-1.4.1/dbus/org.fedoraproject.Config.Printing.xml	2013-02-19 17:18:36.000000000 +0100
+++ system-config-printer-1.4.1.new/dbus/org.fedoraproject.Config.Printing.xml	2013-08-27 18:30:47.840263957 +0200
@@ -267,6 +267,36 @@
       </arg>
     </method>
 
+    <method name="DownloadDriverForDeviceID">
+      <doc:doc>
+	<doc:description>
+	  <doc:para>
+	    Search for downloadable drivers on OpenPrinting and present them for installation.
+	  </doc:para>
+	</doc:description>
+      </doc:doc>
+
+      <arg name="xid" type="u" direction="in">
+	<doc:doc>
+	  <doc:summary>
+	    <doc:para>
+	      The window X ID of the parent.
+	    </doc:para>
+	  </doc:summary>
+	</doc:doc>
+      </arg>
+
+      <arg name="device_id" type="s" direction="in">
+	<doc:doc>
+	  <doc:summary>
+	    <doc:para>
+	      The IEEE 1284 Device ID of the device.
+	    </doc:para>
+	  </doc:summary>
+	</doc:doc>
+      </arg>
+    </method>
+
     <method name="ChangePPD">
       <doc:doc>
 	<doc:description>
@@ -340,6 +370,18 @@
 	    </doc:para>
 	  </doc:summary>
 	</doc:doc>
+      </arg>
+    </signal>
+
+    <signal name="DriverDownloadChecked">
+      <arg name="name" type="s">
+	<doc:doc>
+	  <doc:summary>
+	    <doc:para>
+	      List of newly installed files, separated by "|".
+	    </doc:para>
+	  </doc:summary>
+	</doc:doc>
       </arg>
     </signal>
   </interface>
diff -Nur -x '*.orig' -x '*~' system-config-printer-1.4.1/newprinter.py system-config-printer-1.4.1.new/newprinter.py
--- system-config-printer-1.4.1/newprinter.py	2013-05-09 13:10:43.000000000 +0200
+++ system-config-printer-1.4.1.new/newprinter.py	2013-08-27 18:34:13.404262945 +0200
@@ -205,6 +205,7 @@
         'printer-modified': (GObject.SIGNAL_RUN_LAST, None,
                              (str,    # printer name
                               bool,)), # PPD modified?
+        'driver_download_checked': (gobject.SIGNAL_RUN_LAST, None, (str,)),
         'dialog-canceled':  (GObject.SIGNAL_RUN_LAST, None, ()),
         }
 
@@ -652,6 +653,8 @@
                                                   'device',
                                                   'ppd']:
             raise RuntimeError
+        if devid == "" and dialog_mode == 'download_driver':
+            raise RuntimeError
 
         combobox = self.cmbNPDownloadableDriverFoundPrinters
         combobox.set_model (Gtk.ListStore (str, str))
@@ -703,11 +706,14 @@
             self.ntbkNewPrinter.set_current_page(1)
             self.fillDeviceTab(device_uri)
         elif self.dialog_mode == "ppd" or \
-            self.dialog_mode == "printer_with_uri":
+            self.dialog_mode == "printer_with_uri" or \
+            self.dialog_mode == "download_driver":
             if self.dialog_mode == "ppd":
                 self.NewPrinterWindow.set_title(_("Change Driver"))
-            else:
+            elif self.dialog_mode == "printer_with_uri":
                 self.NewPrinterWindow.set_title(_("New Printer"))
+            else:
+                self.NewPrinterWindow.set_title(_("Download Printer Driver"))
 
             # We'll need to know the Device ID for this device.
             if self.dialog_mode == "ppd" and not self.devid:
@@ -724,18 +730,28 @@
                                         reply_handler=self.change_ppd_got_devs,
                                         error_handler=self.change_ppd_got_devs)
 
-            self.ntbkNewPrinter.set_current_page(2)
-            self.rbtnNPFoomatic.set_active (True)
-            self.on_rbtnNPFoomatic_toggled(self.rbtnNPFoomatic)
-            self.rbtnChangePPDKeepSettings.set_active(True)
+            if self.dialog_mode == "download_driver":
+                self.ntbkNewPrinter.set_current_page(7)
+                self.nextnptab_rerun = True;
+            else:
+                self.ntbkNewPrinter.set_current_page(2)
+                self.rbtnNPFoomatic.set_active (True)
+                self.on_rbtnNPFoomatic_toggled(self.rbtnNPFoomatic)
+                self.rbtnChangePPDKeepSettings.set_active(True)
+
+                self.auto_make = ""
+                self.auto_model = ""
+                self.auto_driver = None
 
-            self.auto_make = ""
-            self.auto_model = ""
-            self.auto_driver = None
-
-            if self.dialog_mode == "printer_with_uri":
+            if self.dialog_mode == "printer_with_uri" or\
+               self.dialog_mode == "download_driver":
                 self.nextNPTab(step = 0)
 
+            if self.dialog_mode == "download_driver" and \
+               self.founddownloadabledrivers == False:
+                self.on_NPCancel(None)
+                return False
+
         if xid == 0 and self.parent:
             self.NewPrinterWindow.set_transient_for (parent)
 
@@ -1017,14 +1033,16 @@
             order = [0, 4, 5]
         elif self.dialog_mode == "printer" or \
                 self.dialog_mode == "printer_with_uri" or \
-                self.dialog_mode == "ppd":
+                self.dialog_mode == "ppd" or \
+                self.dialog_mode == "download_driver":
             busy (self.NewPrinterWindow)
             if (((page_nr == 1 or page_nr == 7) and step > 0) or
-                (page_nr == 2 and step == 0)):
+                ((page_nr == 2 or page_nr == 7) and step == 0)):
 
-                uri = self.device.uri
-                if uri and uri.startswith ("smb://"):
-                    uri = SMBURI (uri=uri[6:]).sanitize_uri ()
+                if self.dialog_mode != "download_driver":
+                    uri = self.device.uri
+                    if uri and uri.startswith ("smb://"):
+                        uri = SMBURI (uri=uri[6:]).sanitize_uri ()
 
                 if page_nr == 1 or page_nr == 2:
                     self.auto_make, self.auto_model = "", ""
@@ -1111,22 +1129,25 @@
                             # We actually installed a package, delete the
                             # PPD list to get it regenerated
                             self.ppds = None
-                            if (not self.device.id and
-                                (not self.device.make_and_model or
-                                 self.device.make_and_model == "Unknown") and
-                                self.downloadable_driver_for_printer):
-                                self.device.make_and_model = \
-                                    self.downloadable_driver_for_printer
+                            if self.dialog_mode != "download_driver":
+                                if (not self.device.id and
+                                    (not self.device.make_and_model or
+                                     self.device.make_and_model ==
+                                     "Unknown") and
+                                    self.downloadable_driver_for_printer):
+                                    self.device.make_and_model = \
+                                        self.downloadable_driver_for_printer
 
                 devid = None
                 if not self.remotecupsqueue or self.dialog_mode == "ppd":
-                    devid = self.device.id # ID of selected device
+                    if self.dialog_mode != "download_driver":
+                        devid = self.device.id # ID of selected device
                     if not devid:
                         devid = self.devid # ID supplied at init()
                     if not devid:
                         devid = None
-                    if self.ppds == None:
-
+                    if self.ppds == None and \
+                       self.dialog_mode != "download_driver":
                         debugprint ("nextNPTab: need PPDs loaded")
                         p = ppdsloader.PPDsLoader (device_id=devid,
                                                    device_uri=uri,
@@ -1154,7 +1175,10 @@
                 ppdname = None
                 self.id_matched_ppdnames = []
                 try:
-                    if self.remotecupsqueue:
+                    if self.dialog_mode == "download_driver":
+                        ppdname = "download"
+                        status = "download"
+                    elif self.remotecupsqueue:
                         # We have a remote CUPS queue, let the client queue
                         # stay raw so that the driver on the server gets used
                         ppdname = 'raw'
@@ -1239,13 +1263,14 @@
                     if (ppdname and
                         (not self.remotecupsqueue or
                          self.dialog_mode == "ppd")):
-                        ppddict = self.ppds.getInfoFromPPDName (ppdname)
-                        make_model = _singleton (ppddict['ppd-make-and-model'])
-                        (make, model) = \
-                            cupshelpers.ppds.ppdMakeModelSplit (make_model)
-                        self.auto_make = make
-                        self.auto_model = model
-                        self.auto_driver = ppdname
+                        if ppdname != "download":
+                            ppddict = self.ppds.getInfoFromPPDName (ppdname)
+                            make_model = _singleton (ppddict['ppd-make-and-model'])
+                            (make, model) = \
+                                cupshelpers.ppds.ppdMakeModelSplit (make_model)
+                            self.auto_make = make
+                            self.auto_model = model
+                            self.auto_driver = ppdname
                         if (status == "exact" and \
                             self.dialog_mode != "ppd"):
                             self.exactdrivermatch = True
@@ -1323,7 +1348,9 @@
                 except:
                     nonfatalException ()
 
-                if not self.remotecupsqueue or self.dialog_mode == "ppd":
+                if (self.dialog_mode != "download_driver" and \
+                    not self.remotecupsqueue) or \
+                    self.dialog_mode == "ppd":
                     self.fillMakeList()
             elif page_nr == 3: # Model has been selected
                 if not self.device.id:
@@ -1340,7 +1367,9 @@
                         nonfatalException ()
 
             ready (self.NewPrinterWindow)
-            if self.dialog_mode == "printer":
+            if self.dialog_mode == "download_driver":
+                order = [7]
+            elif self.dialog_mode == "printer":
                 if self.remotecupsqueue:
                     order = [1, 0]
                 elif (self.founddownloadabledrivers and
@@ -1552,6 +1581,13 @@
             else:
                 self.btnNPBack.show()
 
+        if self.dialog_mode == "download_driver":
+            self.btnNPBack.hide()
+            self.btnNPForward.hide()
+            self.btnNPApply.show()
+            self.btnNPApply.set_sensitive (True)
+            return
+
         # class/printer
 
         if nr == 1: # Device
@@ -3343,7 +3379,8 @@
             if driver['recommended']:
                 recommended_iter = iter
 
-        if not self.rbtnNPDownloadableDriverSearch.get_active():
+        if not self.rbtnNPDownloadableDriverSearch.get_active() and \
+           self.dialog_mode != "download_driver":
             iter = model.append (None)
             model.set_value (iter, 0, _("Local Driver"))
             model.set_value (iter, 1, 0)
@@ -4037,10 +4074,15 @@
             if not raw:
                 check = True
                 checkppd = ppd
+        elif self.dialog_mode == "download_driver":
+            self.nextNPTab(0);
 
         self.NewPrinterWindow.hide()
         if self.dialog_mode in ["printer", "printer_with_uri", "class"]:
             self.emit ('printer-added', name)
+        elif self.dialog_mode == "download_driver":
+            self.emit ('driver_download_checked',
+                       "|".join(self.installed_driver_files))
         else:
             self.emit ('printer-modified', name, self.orig_ppd != self.ppd)
 
diff -Nur -x '*.orig' -x '*~' system-config-printer-1.4.1/scp-dbus-service.py system-config-printer-1.4.1.new/scp-dbus-service.py
--- system-config-printer-1.4.1/scp-dbus-service.py	2013-05-09 13:10:45.000000000 +0200
+++ system-config-printer-1.4.1.new/scp-dbus-service.py	2013-08-27 18:30:47.844263957 +0200
@@ -125,16 +125,20 @@
         self.device_id = device_id
         self.device_make_and_model = device_make_and_model
         self.device_uri = device_uri
+        self.cupsconn = cupsconn
+        self.language = language
         self.reply_handler = reply_handler
         self.error_handler = error_handler
         self._signals = []
+        self.installed_files = []
+        self.download_tried = False
         debugprint ("+%s" % self)
 
         g_killtimer.add_hold ()
         global g_ppds
         if g_ppds == None:
             debugprint ("GetBestDrivers request: need to fetch PPDs")
-            g_ppds = FetchedPPDs (cupsconn, language)
+            g_ppds = FetchedPPDs (self.cupsconn, self.language)
             self._signals.append (g_ppds.connect ('ready', self._ppds_ready))
             self._signals.append (g_ppds.connect ('error', self._ppds_error))
             g_ppds.run ()
@@ -175,6 +179,7 @@
                 id_dict["MDL"] = mdl
                 id_dict["DES"] = ""
                 id_dict["CMD"] = []
+                self.device_id = "MFG:%s;MDL:%s;" % (mfg, mdl)
 
             fit = ppds.getPPDNamesFromDeviceID (id_dict["MFG"],
                                                 id_dict["MDL"],
@@ -183,8 +188,40 @@
                                                 self.device_uri,
                                                 self.device_make_and_model)
 
-            ppdnamelist = ppds.orderPPDNamesByPreference (fit.keys ())
+            ppdnamelist = ppds.orderPPDNamesByPreference (fit.keys (),
+                                                          self.installed_files,
+                                                          devid=id_dict,
+                                                          fit=fit)
+            ppdname = ppdnamelist[0]
+            status = fit[ppdname]
 
+            try:
+                if status != "exact" and not self.download_tried:
+                    self.download_tried = True
+                    self.loop = gobject.MainLoop ()
+                    self.dialog = newprinter.NewPrinterGUI()
+                    self.dialog.NewPrinterWindow.set_modal (False)
+                    self.handles = \
+                        [self.dialog.connect ('dialog-canceled',
+                                              self.on_dialog_canceled),
+                         self.dialog.connect ('driver_download_checked',
+                                              self.on_driver_download_checked)]
+                    if self.dialog.init ('download_driver',
+                                         devid=self.device_id):
+                        self.loop.run()
+                    for handle in self.handles:
+                        self.dialog.disconnect (handle)
+                    if len(self.installed_files) > 0:
+                        debugprint ("GetBestDrivers request: Re-fetch PPDs after driver download")
+                        g_ppds = FetchedPPDs (self.cupsconn, self.language)
+                        self._signals.append (g_ppds.connect ('ready', self._ppds_ready))
+                        self._signals.append (g_ppds.connect ('error', self._ppds_error))
+                        g_ppds.run ()
+                        return
+            except:
+                # Ignore driver download if packages needed for the GUI are not
+                # installed or if no windows can be opened
+                pass
             g_killtimer.remove_hold ()
             self.reply_handler (map (lambda x: (x, fit[x]), ppdnamelist))
         except Exception, e:
@@ -195,6 +232,14 @@
 
             self.error_handler (e)
 
+    def on_driver_download_checked(self, obj, installed_files):
+        self.installed_files = installed_files.split("|")
+        self.loop.quit ()
+
+    def on_dialog_canceled(self, obj):
+        self.installed_files = []
+        self.loop.quit ()
+
 class GroupPhysicalDevicesRequest:
     def __init__ (self, devices, reply_handler, error_handler):
         self.devices = devices
@@ -260,7 +305,9 @@
                         self.dialog.connect ('printer-added',
                                              self.on_printer_added),
                         self.dialog.connect ('printer-modified',
-                                             self.on_printer_modified)]
+                                             self.on_printer_modified),
+                        self.dialog.connect ('driver_download_checked',
+                                             self.on_driver_download_checked)]
         self._ppdcache = ppdcache.PPDCache ()
         self._cupsconn = cupsconn
         debugprint ("+%s" % self)
@@ -276,6 +323,12 @@
                           devid=device_id, xid=xid)
 
     @dbus.service.method(dbus_interface=CONFIG_NEWPRINTERDIALOG_IFACE,
+                         in_signature='us', out_signature='')
+    def DownloadDriverForDeviceID(self, xid, device_id):
+        g_killtimer.add_hold ()
+        self.dialog.init ('download_driver', devid=device_id, xid=xid)
+
+    @dbus.service.method(dbus_interface=CONFIG_NEWPRINTERDIALOG_IFACE,
                          in_signature='uss', out_signature='')
     def ChangePPD(self, xid, name, device_id):
         g_killtimer.add_hold ()
@@ -313,6 +366,11 @@
     def PrinterModified(self, name, ppd_has_changed):
         pass
 
+    @dbus.service.signal(dbus_interface=CONFIG_NEWPRINTERDIALOG_IFACE,
+                         signature='s')
+    def DriverDownloadChecked(self, installed_files):
+        pass
+
     def on_dialog_canceled(self, obj):
         g_killtimer.remove_hold ()
         self.DialogCanceled ()
@@ -331,6 +389,12 @@
         self.remove_handles ()
         self.remove_from_connection ()
 
+    def on_driver_download_checked(self, obj, installed_files):
+        g_killtimer.remove_hold ()
+        self.DriverDownloadChecked (installed_files)
+        self.remove_handles ()
+        self.remove_from_connection ()
+
     def remove_handles (self):
         for handle in self.handles:
             self.dialog.disconnect (handle)
