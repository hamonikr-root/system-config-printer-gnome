#!/bin/bash
shopt -s execfail
exec -a "$0" python -- "$@" <(tail -n +4 -- "$0") || exit 0 # -*- python -*-

## Copyright (C) 2009 Red Hat, Inc.
## Author: Tim Waugh <twaugh@redhat.com>

## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 2 of the License, or
## (at your option) any later version.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.

## You should have received a copy of the GNU General Public License
## along with this program; if not, write to the Free Software
## Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import sys

try:
    import cups
    CAN_EXAMINE_PPDS=True
except:
    CAN_EXAMINE_PPDS=False

from getopt import getopt
import os
import posix
import re
import shlex
import signal
import stat
import subprocess
import sys
import tempfile

class TimedOut(Exception):
    def __init__ (self):
        Exception.__init__ (self, "Timed out")

class DeviceIDs:
    def __init__ (self):
        self.ids = dict()

    def get_dict (self):
        return self.ids

    def get_tags (self):
        ret = []
        def squash(x):
            r = x.lower ()
            for a in [' ', '(', ')']:
                r = r.replace (a, '_')

            return r

        for mfg, mdlset in self.ids.iteritems ():
            mfgsquash = squash (mfg)
            for mdl in mdlset:
                mdlsquash = squash (mdl)
                ret.append ("postscriptdriver(%s;%s;)" % (mfgsquash,
                                                          mdlsquash))

        return ret

    def __add__ (self, other):
        if isinstance(other, DeviceIDs):
            for omfg, omdlset in other.ids.iteritems ():
                try:
                    mdlset = self.ids[omfg]
                except KeyError:
                    mdlset = set()
                    self.ids[omfg] = mdlset

                mdlset.update (omdlset)

            return self

        pieces = other.split (';')
        mfg = mdl = None
        for piece in pieces:
            s = piece.split (":")
            if len (s) != 2:
                continue
            key, value = s
            key = key.upper ()
            if key in ["MFG", "MANUFACTURER"]:
                mfg = value
            elif key in ["MDL", "MODEL"]:
                mdl = value

        if mfg and mdl:
            try:
                mdlset = self.ids[mfg]
            except KeyError:
                mdlset = set()
                self.ids[mfg] = mdlset

            mdlset.add (mdl)

        return self

class Driver:
    def __init__ (self):
        self.ids = DeviceIDs()

    def list (self):
        return self.ids

class PPDDriver(Driver):
    def __init__ (self, pathname=None):
        Driver.__init__ (self)
        self.pathname = pathname

    def list (self):
        if self.pathname != None:
            self.examine_file (self.pathname)

        return Driver.list (self)

    def examine_file (self, path):
        try:
            ppd = cups.PPD (path)
        except RuntimeError:
            # Not a PPD file.  Perhaps it's a drv file.
            drv = DrvDriver (path)
            self.ids += drv.list ()
            return

        attr = ppd.findAttr ('1284DeviceID')
        if attr:
            self.ids += attr.value

class DynamicDriver(Driver):
    def __init__ (self, driver):
        Driver.__init__ (self)
        self.driver = driver
        signal.signal (signal.SIGALRM, self._alarm)

    def _alarm (self, sig, stack):
        raise TimedOut

    def list (self):
        signal.alarm (60)
        p = subprocess.Popen ([self.driver, "list"],
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)
        try:
            (stdout, stderr) = p.communicate ()
            signal.alarm (0)
        except TimedOut:
            posix.kill (p.pid, signal.SIGKILL)
            raise

	if stderr:
		print >> sys.stderr, stderr

	ppds = []
	lines = stdout.split ('\n')
	for line in lines:
		l = shlex.split (line)
		if len (l) < 5:
                    continue
                self.ids += l[4]

        return Driver.list (self)

class DrvDriver(PPDDriver):
    def __init__ (self, pathname):
        PPDDriver.__init__ (self)
        self.drv = pathname

    def _alarm (self, sig, stack):
        raise TimedOut

    def list (self):
        tmpdir = os.environ.get ("TMPDIR", "/tmp") + os.path.sep
        outputdir = tempfile.mkdtemp (dir=tmpdir)
        
        argv = [ "ppdc",
                 "-d", outputdir,
                 "-I", "/usr/share/cups/ppdc",
                 self.drv ]

        signal.alarm (60)
        p = subprocess.Popen (argv,
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)
        try:
            (stdout, stderr) = p.communicate ()
            signal.alarm (0)
        except TimedOut:
            posix.kill (p.pid, signal.SIGKILL)
            raise

        os.path.walk (outputdir, self.examine_directory, None)
        os.rmdir (outputdir)
        return Driver.list (self)

    def examine_directory (self, unused, dirname, fnames):
        for fname in fnames:
            path = dirname + os.path.sep + fname
            self.examine_file (path)
            os.unlink (path)

class TagBuilder:
    def __init__ (self, filelist=None):
        if filelist == None:
            filelist = sys.stdin

        paths = map (lambda x: x.rstrip (), filelist.readlines ())
        self.ids = DeviceIDs ()

        for path in paths:
            if path.find ("/usr/lib/cups/driver/") != -1:
                try:
                    self.ids += DynamicDriver (path).list ()
                except TimedOut:
                    pass

        if CAN_EXAMINE_PPDS:
            candidates = set()
            symlinks = set()
            for searchpath in ["/usr/share/cups/model/",
                               "/usr/share/ppd/",
                               "/usr/share/cups/drv/"]:
                for path in paths:
                    if path.find (searchpath) != -1:
                        st = os.lstat (path)
                        if stat.S_ISLNK (st.st_mode):
                            symlinks.add (path)
                        elif stat.S_ISREG (st.st_mode):
                            candidates.add (path)

            # Now check for symlinks (just one level)
            for each in symlinks:
                target = os.path.realpath (each)
                if target in candidates:
                    continue

                try:
                    st = os.lstat (target)
                except OSError:
                    continue

                if stat.S_ISREG (st.st_mode):
                    candidates.add (target)
                elif stat.S_ISDIR (st.st_mode):
                    if not target.endswith (os.path.sep):
                        target += os.path.sep

                    for path in paths:
                        if path.find (target) != -1:
                            st = os.lstat (path)
                            if stat.S_ISREG (st.st_mode):
                                candidates.add (path)

            for path in candidates:
                try:
                    self.ids += PPDDriver (path).list ()
                except TimedOut:
                    pass

    def get_tags (self):
        return self.ids.get_tags ()

if __name__ == "__main__":
    builder = TagBuilder ()
    tags = builder.get_tags ()
    for tag in tags:
        print tag
